col0,col1,col2
example.py,0,"b""from numpythia import Pythia, hepmc_write, hepmc_read\nfrom numpythia import STATUS, HAS_END_VERTEX, ABS_PDG_ID\nfrom numpythia.testcmnd import get_cmnd\nfrom numpy.testing import assert_array_equal\n\npythia = Pythia(get_cmnd('w'), random_state=1)\nprint(pythia.weight_labels)\n\nselection = ((STATUS == 1) & ~HAS_END_VERTEX &\n             (ABS_PDG_ID != 12) & (ABS_PDG_ID != 14) & (ABS_PDG_ID != 16))\n\n"
setup.py,0,b'
numpythia/__init__.py,0,"b""from ._libnumpythia import _Pythia as Pythia, ReaderAscii, WriterAscii\nfrom ._libnumpythia import FILTERS\nimport logging\n\nlocals().update(FILTERS)\n\nlog = logging.getLogger(__name__)\n\n__all__ = [\n    'Pythia',\n    'hepmc_read',\n    'hepmc_write',\n]\n\nPYTHIA_VERSION = '8.226'\nHEPMC_VERSION = '3.0.0'\n\n\ndef hepmc_read(filename):\n    reader = ReaderAscii(filename)\n    for event in reader:\n        yield event\n\ndef hepmc_write(filename, source):\n    writer = WriterAscii(filename)\n    for event in source:\n        writer.write(event)\n        yield event\n"""
tests/test_import.py,0,b'def test_import():\n    import numpythia\n    assert numpythia is not None\n\n'
tests/test_readme.py,0,"b""from numpythia import Pythia, hepmc_write, hepmc_read\nfrom numpythia import STATUS, HAS_END_VERTEX, ABS_PDG_ID\nfrom numpythia.testcmnd import get_cmnd\nfrom numpy.testing import assert_array_equal\n\ndef test_first_example():\n    pythia = Pythia(get_cmnd('w'), random_state=1)\n\n    selection = ((STATUS == 1) & ~HAS_END_VERTEX &\n                (ABS_PDG_ID != 12) & (ABS_PDG_ID != 14) & (ABS_PDG_ID != 16))\n\n    "
numpythia/testcmnd/__init__.py,0,"b""import os\nfrom pkg_resources import resource_filename\n\n\n__all__ = [\n    'get_cmnd',\n]\n\n\ndef get_cmnd(name):\n    return resource_filename('numpythia',\n                             os.path.join('testcmnd', name + '.cmnd'))\n"""
